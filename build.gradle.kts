import org.gradle.api.tasks.testing.logging.TestExceptionFormat

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    `java-library`
    `maven-publish`
    jacoco
    alias(libs.plugins.spotless)
    alias(libs.plugins.shadow)
    alias(libs.plugins.jpackage)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(libs.slf4j.api)
    implementation(libs.bundles.log4j)
    implementation(libs.gson)
    implementation(libs.commons.cli)
    implementation(libs.guice)
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly(libs.junit.platform.launcher)
    testImplementation(libs.bundles.mockito)
}

group = "oripa"
version = "1.76"
description = "oripa"

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

// run: gradlew shadowJar
// fat jar will be created in build/libs as oripa-x.yz-all.jar
tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = "oripa.ORIPA"
    }
}

spotless {
  java {
    eclipse().configFile(file("eclipse_formatter.xml"))
    importOrder("java", "javax", "org", "com")
  }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-Xlint:unchecked")
    dependsOn("spotlessApply")
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

tasks.withType<Test>() {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = TestExceptionFormat.FULL
    }
}

// Coverage report
tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report
}

task("copyDependencies", Copy::class) {
	val buildDirectory = layout.buildDirectory.get()
    from(configurations.runtimeClasspath).into("$buildDirectory/jars")
}

task("copyJar", Copy::class) {
	val buildDirectory = layout.buildDirectory.get()
    from(tasks.jar).into("$buildDirectory/jars")
}

// run: gradlew clean jpackage
// installer will be created in build/dist.
tasks.jpackage {
	val buildDirectory = layout.buildDirectory.get()

    dependsOn("build", "copyDependencies", "copyJar")

    input  = buildDirectory.dir("jars")
    destination = buildDirectory.dir("dist")

    appName = "oripa"
    vendor = "oripa"

    mainJar = tasks.jar.get().archiveFileName.get()
    mainClass = "oripa.ORIPA"

    javaOptions = listOf("-Dfile.encoding=UTF-8")

	// Windows specific parameters will be processed only during Windows build
	winMenu = true
	winDirChooser = true

    windows {
    
    }
}